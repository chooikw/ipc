name: Fendermint CI - Test

# This workflow is triggered from the main CI workflow.
on:
  workflow_call:

env:
  CARGO_INCREMENTAL: '0'
  SCCACHE_CACHE_SIZE: 10G
  CC: "sccache clang"
  CXX: "sccache clang++"
  PROFILE: "ci"
  BUILDX_FLAGS: "--cache-from=type=gha --cache-to=type=gha,mode=max"

jobs:
  # Check code formatting; anything that doesn't require compilation.
  pre-compile-checks:
    name: Pre-compile checks
    runs-on: ubuntu-latest
    steps:
      - name: Check out the project
        uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: rustfmt

      - name: Check code formatting
        run: cd fendermint && make check-fmt


  # Test matrix, running tasks from the Makefile.
  tests:
    # Skip tests on draft PRs, they take a long time, and drafts are for visibility.
    if: ${{ !github.event.pull_request.draft }}
    needs: [pre-compile-checks]
    name: ${{ matrix.make.name }} (${{ matrix.os }}, ${{ matrix.rust }})
    runs-on: ${{ matrix.os }}

    env:
      RUST_BACKTRACE: full
      RUSTFLAGS: -Dwarnings

    steps:
      # https://github.com/marketplace/actions/free-disk-space-ubuntu
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          large-packages: false
          swap-storage: false
          docker-images: false
          android: true
          dotnet: true
          haskell: true

      - name: Check out the project
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install Tools
        uses: ./.github/actions/install-tools
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          rust: ${{ matrix.rust }}

      - name: Setup Cache
        uses: ./.github/actions/setup-cache
        timeout-minutes: 5
        continue-on-error: true
        with:
          # Caching everything separately, in case they don't ask for the same things to be compiled.
          cache-prefix: fendermint-${{ matrix.make.name }}-${{ matrix.os }}-${{ matrix.rust }}-${{ hashFiles('rust-toolchain', 'rust-toolchain.toml') }}
          cache-suffix: ${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Solidity ABI artifacts
        uses: actions/cache@v2
        with:
          path: ./contracts/out
          key: contracts-abi-${{ hashFiles('./contracts/src/**/*.sol') }}

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18.19.0
      - name: Install dependencies
        run: npm install
        working-directory: 'fevm-contract-tests'
      - name: Set up Rust cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - name: Install cargo-make
        run: |
          if ! command -v cargo-make &> /dev/null
          then
              cargo install -f cargo-make
          fi

      - uses: actions/cache/save@v3
        if: always()
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Foundry
        working-directory: ipc/contracts
        run: |
          curl -L https://foundry.paradigm.xyz | bash
          export PATH="$PATH:/home/runner/.config/.foundry/bin"
          foundryup

      - name: Compile IPC Abi
        env:
          PROMTAIL_CLIENT_URL: ${{ secrets.PROMTAIL_CLIENT_URL }}
        run: cd fendermint && make compile-abi docker-deps

      - name: Clippy
        env:
          PROMTAIL_CLIENT_URL: ${{ secrets.PROMTAIL_CLIENT_URL }}
        run: cargo clippy --all

      - name: Unit Tests
        env:
          PROMTAIL_CLIENT_URL: ${{ secrets.PROMTAIL_CLIENT_URL }}
        run: cd fendermint && make build test

      - name: Build Fendermint Docker Image
        env:
          PROMTAIL_CLIENT_URL: ${{ secrets.PROMTAIL_CLIENT_URL }}
        run: cd fendermint && make docker-build
